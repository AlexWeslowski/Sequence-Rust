#![allow(unused_imports)]
#![allow(non_snake_case)] 

extern crate divisors;
//extern crate flurry;
extern crate num;
extern crate primes;
//extern crate seize;
extern crate std;
extern crate thousands;

use ahash::{AHasher, AHashMap, AHashSet, HashSetExt, RandomState};
use bit_vec::BitVec;
use crossbeam_skiplist::SkipSet;
use fixedbitset::FixedBitSet;
//use flurry::{Guard, HashSet};
use function_name::named;
use hashbrown::HashMap;
use lazy_static::lazy_static;
use num::integer::lcm;
use num::rational::Ratio;
use num::rational::Rational64;
use num_primes::Factorization as NumPrimesFactorization;
//use perf::PerfGuard;
//use perf_macro::profile;
use prime_factorization::Factorization as PrimeFactorization;
use primes::{Sieve, PrimeSet};
//use seize::collector::Guard;
use std::cmp::{max, min};
use std::collections::{BTreeSet, HashSet};
use std::result::Result;
use std::sync::{Arc, Mutex, RwLock};
use std::sync::atomic::{AtomicUsize, Ordering};
use std::time::Instant;
use thousands::Separable;
use time_graph_macros::instrument;
use tinyvec::{array_vec, ArrayVec};
use tinyvec::{tiny_vec, TinyVec};
//use tinyvec::tinyvec::{tiny_vec, TinyVec};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct Factor {
    i: u32,
    exp: u8,
}

macro_rules! generate_map {
    ($struct_name:ident, $key_type:ty, $value_type:ty) => {
        
        //#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq)]
        #[derive(Debug, Clone, PartialEq)]
        pub struct $struct_name {
            keys: Vec<[u32; 2]>,
            values: Vec<$value_type>,
            pub max_capacity: usize,
            pub resizeable: bool,
        }

        impl $struct_name {
            pub fn new(sz: usize, maxcapacity: usize, resize: bool) -> Self {
                $struct_name {
                    keys: vec![[0, 0]; sz + 1],
                    values: Vec::with_capacity(sz + 1),
                    max_capacity: maxcapacity,
                    resizeable: resize,
                }
            }
            
            pub fn keys_len(&self) -> usize {
                return self.keys.len();
            }
            
            pub fn values_len(&self) -> usize {
                return self.values.len();
            }
            
            pub fn insert(&mut self, n: $key_type, vec: Vec<$value_type>) {
                let i = self.values.len();
                if i < self.max_capacity {
                    let un = n as usize;
                    for val in vec {
                        self.values.push(val);
                    }
                    let j = self.values.len();
                    if self.resizeable && un > self.keys.len() - 1 {
                        self.keys.extend(vec![[0, 0]; 131072]);
                    }
                    self.keys[un] = [i as u32, j as u32];
                }
            }
            
            pub fn contains_key(&mut self, n: $key_type) -> bool {                
                let un = n as usize;
                if self.resizeable && un > self.keys.len() - 1 {
                    self.keys.extend(vec![[0, 0]; 131072]);
                } else if !self.resizeable && un > self.keys.len() - 1 {
                    return false;
                }
                return self.keys[un][0] != 0;
            }
            
            pub fn get(&self, n: $key_type) -> &[$value_type] {
                let i: usize = self.keys[n as usize][0] as usize;
                let j: usize = self.keys[n as usize][1] as usize;
                return &self.values[i..j];
            }
        }
    }
}

generate_map!(MapI32, u32, i32);
generate_map!(MapU32, u32, u32);
generate_map!(MapFactor, u32, Factor);
generate_map!(MapI64, u64, i64);
generate_map!(MapU64, u64, u64);


pub struct Sequence
{
    //n: u32,
    pub min_factors_len: usize,
    pub max_factors_len: usize,
    pub capacity: usize,
    capacity_sqrt: u32,
    half: Ratio<i32>,
    one: Ratio<i32>,
    combinations_vec: Vec<Vec<u32>>,
    combinations_tinyvec: Vec<TinyVec<[i32; 24]>>,
    combinations_arrayvec: Vec<ArrayVec<[i32; 24]>>,
	combinations_ary: Vec<[u32; 24]>,
    //pub lcm_map: Mutex<HashMap<(i32, i32), i32, RandomState>>,
    pub lcm_map: Arc<Mutex<HashMap<(i32, i32), i32, RandomState>>>,
    //setprimes: Arc<HashSet<i64, RandomState>>,
    pub bitprimes: FixedBitSet,
    //vecprimes: Arc<Vec<u32>>,
    //pub factors: Mutex<MapFactor>,
    //pub factor_slices: MapU32,
    //pub divisors: Mutex<MapU32>,
    //vecprimes: Arc<Mutex<Vec<u32>>>,
    pub factors: Arc<Mutex<MapFactor>>,
    pub factor_slices: Arc<Mutex<MapU32>>,
    pub divisors: Arc<Mutex<MapU32>>,
    pub exhaustive_search: bool,
    pub global: bool,
    pub resize: bool,
    pub bln_gt_half: bool,
    pub bln_divisors: bool,
    pub bln_factors: bool,
    pub bln_factor_slices: bool,
}

lazy_static! {
    static ref BlnInit: Mutex<bool> = Mutex::new(false);
    static ref BlnPrimes: Mutex<bool> = Mutex::new(false);
    
    static ref LcmMapCapacity: AtomicUsize = AtomicUsize::new(1048576); 
    static ref LcmMap: Mutex<HashMap<(i32, i32), i32, RandomState>> = Mutex::new(HashMap::with_hasher(RandomState::new()));
    
    //static ref FactorsCapacity: AtomicUsize = AtomicUsize::new(536870912); 
    static ref Factors: Mutex<MapFactor> = Mutex::new(MapFactor::new(1023, 1024, true));
    //static ref FactorSlicesCapacity: AtomicUsize = AtomicUsize::new(1023);
    static ref FactorSlices: Mutex<MapU32> = Mutex::new(MapU32::new(1023, 1024, true));
    
    //static ref DivisorsCapacity: AtomicUsize = AtomicUsize::new(1023); 
    static ref Divisors: Mutex<MapU32> = Mutex::new(MapU32::new(1023, 1048576, true));
    
    static ref VecPrimes: Mutex<Vec<u32>> = Mutex::new(Vec::<u32>::new());
    
    pub static ref Perf: Mutex<AHashMap<&'static str, f64>> = Mutex::new(AHashMap::new());
}




impl Sequence
{

pub fn new(capacity: usize, global: bool, resize: bool) -> Self
{
    //1048576/4408320 = 0.24
    //1835008/4408320 = 0.42
    //2752512/4408320 = 0.62
    let i1 = (0.24 * capacity as f32) as usize;
    let i2 = min(2_usize.pow(i1.ilog2() + 1), 2_usize.pow(26));
    LcmMapCapacity.store(i2, Ordering::Relaxed);
    // 536870912/4408320 = 122
    //1370015373/4408320 = 311
    //2808531504/4408320 = 637
    let j1 = 122 * capacity;
    let j2 = min(2_usize.pow(j1.ilog2()), 2_usize.pow(34));
    if global {
        //FactorsCapacity.store(j2, Ordering::Relaxed);
        //FactorSlicesCapacity.store(j2, Ordering::Relaxed);
        Factors.lock().unwrap().max_capacity = j2;
        FactorSlices.lock().unwrap().max_capacity = j2;
    }
    //14812160/39621120 = 0.37
    let k1 = (0.38 * capacity as f32) as usize;
    Self { 
        //n: i, 
        min_factors_len: 4,
        max_factors_len: 10,
        capacity: capacity,
        capacity_sqrt: capacity.isqrt() as u32,
        half: Ratio::<i32>::new(1, 2), 
        one: Ratio::<i32>::new(1, 1),
        combinations_vec: Vec::<Vec<u32>>::with_capacity(512), 
		combinations_tinyvec: Vec::<TinyVec<[i32; 24]>>::with_capacity(512),
		combinations_arrayvec: Vec::<ArrayVec<[i32; 24]>>::with_capacity(512),
		combinations_ary: Vec::<[u32; 24]>::with_capacity(512), 
        //lcm_map: Mutex::new(HashMap::<(i64, i64), i64, RandomState>::new()),
        //lcm_map: Mutex::new(HashMap::with_hasher(RandomState::new())),
        lcm_map: Arc::new(Mutex::new(HashMap::with_hasher(RandomState::new()))),
        //setprimes: Arc::new(HashSet::<i64, RandomState>::new()), 
        bitprimes: FixedBitSet::with_capacity(capacity + 1),
        //vecprimes: Arc::new(Vec::<u32>::new()), 
        factors: Arc::new(Mutex::new(MapFactor::new(j2, 2*j2, resize))),
        factor_slices: Arc::new(Mutex::new(MapU32::new(j2, 2*j2, resize))),
        divisors: Arc::new(Mutex::new(MapU32::new(k1, capacity, resize))),
        exhaustive_search: false,
        global: global,
        resize: resize,
        bln_gt_half: false,
        bln_divisors: false,
        bln_factors: false,
        bln_factor_slices: false,
    }
}

pub fn set_primes(&mut self, arc_primes: &Arc<Vec<u32>>) 
{
	//self.bitprimes = FixedBitSet::with_capacity(self.capacity + 1);
    //self.bitprimes = FixedBitSet::with_capacity((primes[primes.len() - 1] + 1) as usize);
    //for &p in primes.iter() {
	for &p in arc_primes.iter() {
        self.bitprimes.insert(p as usize);
    }
    
    let mut bln = BlnPrimes.lock().unwrap();
    if *bln {
        return;
    }
    //let vec_primes: Vec<u32> = Arc::try_unwrap(arc_primes).unwrap_or_else(|arc| (*arc).clone());
    //*VecPrimes.lock().unwrap() = primes;
	let isqrt = arc_primes.len().isqrt();
    *VecPrimes.lock().unwrap() = arc_primes[0..isqrt].to_vec();
    *bln = true;
    self.init();
}

pub fn init(&mut self)
{
    let mut bln = BlnInit.lock().unwrap();
    if *bln {
        return;
    }
    let icapacity = self.capacity as u32;
    let isqrtcapacity = icapacity.isqrt();
    /*
    if VecPrimes.lock().unwrap().len() <= 1
    {
        let mut pset = Sieve::new();
        for p in pset.iter()
        {
            let ip = p as i64;
            VecPrimes.lock().unwrap().insert(ip);
            if ip > capacity
            {
                break;
            }
        }
    }
    */
    let mut factors = Factors.lock().unwrap();
    let mut factor_slices = FactorSlices.lock().unwrap();
    let mut divisors = Divisors.lock().unwrap();
    let len = VecPrimes.lock().unwrap().len();
    for i in 0..len {
        let p1 = VecPrimes.lock().unwrap()[i];
        //factors.insert(p1 as u64, vec![p1, 1]);
        //divisors.insert(p1 as u64, vec![1, p1]);
        let mut factors2_vec: Vec<Factor> = vec![Factor { i: 0, exp: 1 }, Factor { i: 0, exp: 1 }];
        let mut factorslices2_vec: Vec<u32> = vec![0, 0];
        let mut divisors2_vec: Vec<u32> = vec![0, 0];
        for j in 0..len {
            let p2 = VecPrimes.lock().unwrap()[j];
            let iproduct = p1 * p2;
            if iproduct > isqrtcapacity {
                break;
            } else {
                //divisors2_vec[0] = 1;
                //divisors2_vec[3] = p2 * p1;
                if p1 == p2 {
                    if self.bln_factors { factors.insert(iproduct as u32, vec![Factor { i: p1, exp: 2 }]); }
                    if self.bln_factor_slices { factor_slices.insert(iproduct as u32, vec![p1, p1]); }
                    divisors.insert(iproduct as u32, vec![p1]);
                } else {
                    factors2_vec[0].i = p1;
                    factors2_vec[1].i = p2;
                    factorslices2_vec[0] = p1;
                    factorslices2_vec[1] = p2;
                    divisors2_vec[0] = p1;
                    divisors2_vec[1] = p2;
                    if self.bln_factors { factors.insert(iproduct as u32, factors2_vec.clone()); }
                    if self.bln_factor_slices { factor_slices.insert(iproduct as u32, factorslices2_vec.clone()); }
                    divisors.insert(iproduct as u32, divisors2_vec.clone());
                }
            }
            
            let mut factors3_vec: Vec<Factor> = vec![Factor { i: 0, exp: 1 }, Factor { i: 0, exp: 1 }, Factor { i: 0, exp: 1 }];
            let mut factorslices3_vec: Vec<u32> = vec![0, 0, 0];
            let mut divisors3_vec: Vec<u32> = vec![0, 0, 0, 0, 0, 0];
            for k in 0..len {
                let p3 = VecPrimes.lock().unwrap()[k];
                let iproduct = p1 * p2 * p3;
                if iproduct > isqrtcapacity {
                    break;
                } else {
                    //divisors3_vec[0] = 1;
                    //divisors3_vec[3] = p3 * p2 * p1;
                    if (p1 == p2 && p1 == p3) {
                        if self.bln_factors { factors.insert(iproduct as u32, vec![Factor { i: p1, exp: 3 }]); }
                        if self.bln_factor_slices { factor_slices.insert(iproduct as u32, vec![p1, p1, p1]); }
                        divisors.insert(iproduct as u32, vec![p1, p1*p1]);
                    } else if (p1 == p2) {
                        if self.bln_factors { factors.insert(iproduct as u32, vec![Factor { i: p1, exp: 2 }, Factor { i: p3, exp: 1 }]); }
                        if self.bln_factor_slices { factor_slices.insert(iproduct as u32, vec![p1, p1, p3]); }
                        let mut vec = vec![p1, p3, p1*p1, p1*p3];
                        vec.sort();
                        divisors.insert(iproduct as u32, vec);
                    } else if (p2 == p3) {
                        if self.bln_factors { factors.insert(iproduct as u32, vec![Factor { i: p1, exp: 1 }, Factor { i: p2, exp: 2 }]); }
                        if self.bln_factor_slices { factor_slices.insert(iproduct as u32, vec![p1, p2, p2]); }
                        let mut vec = vec![p1, p2, p1*p2, p2*p2];
                        vec.sort();
                        divisors.insert(iproduct as u32, vec);
                    } else {
                        factors3_vec[0].i = p1;
                        factors3_vec[1].i = p2;
                        factors3_vec[2].i = p3;
                        divisors3_vec[0] = p1;
                        divisors3_vec[1] = p2;
                        divisors3_vec[2] = p3;
                        divisors3_vec[3] = p1*p2;
                        divisors3_vec[4] = p1*p3;
                        divisors3_vec[5] = p2*p3;
                        if self.bln_factors { factors.insert(iproduct as u32, factors3_vec.clone()); }
                        if self.bln_factor_slices { factor_slices.insert(iproduct as u32, factorslices3_vec.clone()); }
                        divisors3_vec.sort();
                        divisors.insert(iproduct as u32, divisors3_vec.clone());
                    }
                }
            }
        }
    }
    if !self.bln_divisors {
        divisors.resizeable = false;
    }
    *bln = true;
}


pub fn backtrack_ary(&mut self, istart: u32, itarget: u32, factors: &mut[u32; 24], factors_len: usize)
{
    let t0 = Instant::now();
    //println!("backtrack_ary(istart = {}, itarget = {}, factors = {:?}, factors_len = {})", istart, itarget, factors, factors_len);
	
    if itarget == 1 
    {
        if (factors_len >= self.min_factors_len && factors_len <= self.max_factors_len) 
        {
            factors.sort_unstable();
            if (self.bln_gt_half || factors[0] != 2) && factors[0] != factors[1]
            {
                let mut bappend: bool = true;
                let mut j: usize = factors_len;
                while j > 1
                {
                    j -= 1;
                    let mut k: usize = j;
                    while k > 0
                    { 
                        k -= 1;
                        if factors[j] % factors[k] == 0
                        {
                            bappend = false;
                            break;
                        }
                    }
                    if !bappend
                    {
                        break;
                    }
                }
                if bappend && self.combinations_ary.iter().find(|&x| *x == *factors).is_none()
                {
                    self.combinations_ary.push(*factors);
                }
            }
        }
        
    } else {
        
        if unsafe { self.bitprimes.contains_unchecked(itarget as usize) } {
            //println!("{} is prime", itarget);
            factors[factors_len] = itarget;
            self.backtrack_ary(itarget, 1, &mut factors.clone(), factors_len + 1);
			factors[factors_len] = 0;
        } else {
            //let bprint: bool = true;
            //let bprint: bool = itarget == 24 * 4373 || itarget == 1049520;
            if self.exhaustive_search {
                let mut i = istart;
                while i * i <= itarget {
                    if itarget % i == 0 {
                        factors[factors_len] = i;
                        //if bprint { println!("n = {}, istart = {}, itarget = {}, i = {}, factors = {:?}", n, istart, itarget, i, factors); }
                        self.backtrack_ary(i, itarget / i, factors, factors_len + 1);
						factors[factors_len] = 0;
                    }
                    i += 1;
                }
            } else {
                //let mut vecdivisors: Vec<u32> = self.divisor_gen(itarget);
				let mut vecdivisors: Vec<u32> = divisors::get_divisors(itarget);
				//println!("vecdivisors({}) orig: {:?}", itarget, vecdivisors);
                //vecdivisors.sort_unstable();
				//println!("vecdivisors({}) sort: {:?}", vecdivisors);
                if false {
                    vecdivisors.push(itarget);
                }
                for div in &vecdivisors {
                    if *div != vecdivisors[vecdivisors.len() - 1] {
                        factors[factors_len] = *div;
                        self.backtrack_ary(*div, itarget / div, &mut factors.clone(), factors_len + 1);
						factors[factors_len] = 0;
                    }
                }
                if true {
                    factors[factors_len] = itarget;
                    self.backtrack_ary(itarget, 1, &mut factors.clone(), factors_len + 1);
					factors[factors_len] = 0;
                }
            }
        }
    }
    
   return;
}
 
 
pub fn backtrack_tinyvec(&mut self, istart: i32, itarget: i32, mut factors: TinyVec<[i32; 24]>)
{
    let t0 = Instant::now();
    //println!("backtrack_tinyvec(istart = {}, itarget = {}, factors = {:?}, factors_len = {})", istart, itarget, factors, factors.len());
	
    if itarget == 1 
    {
        if (factors.len() >= self.min_factors_len && factors.len() <= self.max_factors_len) 
        {
            factors.sort_unstable();
            if (self.bln_gt_half || factors[0] != 2) && factors[0] != factors[1]
            {
                let mut bappend: bool = true;
                let mut j: usize = factors.len();
                while j > 1
                {
                    j -= 1;
                    let mut k: usize = j;
                    while k > 0
                    { 
                        k -= 1;
                        if factors[j] % factors[k] == 0
                        {
                            bappend = false;
                            break;
                        }
                    }
                    if !bappend
                    {
                        break;
                    }
                }
                if bappend && self.combinations_tinyvec.iter().find(|&x| *x == factors).is_none()
                {
                    self.combinations_tinyvec.push(factors.clone());
                }
            }
        }
        
    } else {
        
        if unsafe { self.bitprimes.contains_unchecked(itarget as usize) } {
            //println!("{} is prime", itarget);
            factors.push(itarget);
            self.backtrack_tinyvec(itarget, 1, factors.clone());
            factors.pop();
        } else {
            //let bprint: bool = true;
            //let bprint: bool = itarget == 24 * 4373 || itarget == 1049520;
            if self.exhaustive_search {
                let mut i = istart;
                while i * i <= itarget {
                    if itarget % i == 0 {
                        factors.push(i as i32);
                        //if bprint { println!("n = {}, istart = {}, itarget = {}, i = {}, factors = {:?}", n, istart, itarget, i, factors); }
                        self.backtrack_tinyvec(i, itarget / i, factors.clone());
                        factors.pop();
                    }
                    i += 1;
                }
            } else {
                //let mut vecdivisors: Vec<u32> = self.divisor_gen(itarget);
				let mut vecdivisors: Vec<u32> = divisors::get_divisors(itarget as u32);
				//println!("vecdivisors({}) orig: {:?}", itarget, vecdivisors);
                //vecdivisors.sort_unstable();
				//println!("vecdivisors({}) sort: {:?}", itarget, vecdivisors);
                if false {
                    vecdivisors.push(itarget as u32);
                }
                for div in &vecdivisors {
                    if *div != vecdivisors[vecdivisors.len() - 1] {
						let idiv = *div as i32;
                        factors.push(idiv);
                        //if bprint { println!("n = {}, istart = {}, itarget = {}, div = {}, factors = {:?}", n, istart, itarget, div, factors); }
                        self.backtrack_tinyvec(idiv, itarget / idiv, factors.clone());
                        factors.pop();
                    }
                }
                if true {
                    factors.push(itarget as i32);
                    self.backtrack_tinyvec(itarget, 1, factors.clone());
                    factors.pop();
                }
            }
        }
    }
    
   return;
}

pub fn backtrack_vec(&mut self, istart: u32, itarget: u32, mut factors: Vec<u32>)
{
    let t0 = Instant::now();
    //println!("backtrack_vec(istart = {}, itarget = {}, factors = {:?}, factors_len = {})", istart, itarget, factors, factors.len());
	
    if itarget == 1 
    {
        if (factors.len() >= self.min_factors_len && factors.len() <= self.max_factors_len) 
        {
            factors.sort_unstable();
            if (self.bln_gt_half || factors[0] != 2) && factors[0] != factors[1]
            {
                let mut bappend: bool = true;
                let mut j: usize = factors.len();
                while j > 1
                {
                    j -= 1;
                    let mut k: usize = j;
                    while k > 0
                    { 
                        k -= 1;
                        if factors[j] % factors[k] == 0
                        {
                            bappend = false;
                            break;
                        }
                    }
                    if !bappend
                    {
                        break;
                    }
                }
                if bappend && self.combinations_vec.iter().find(|&x| *x == factors).is_none()
                {
                    self.combinations_vec.push(factors.clone());
                }
            }
        }
        
    } else {
        
        if unsafe { self.bitprimes.contains_unchecked(itarget as usize) } {
            //println!("{} is prime", itarget);
            factors.push(itarget);
            self.backtrack_vec(itarget, 1, factors.clone());
            factors.pop();
        } else {
            //let bprint: bool = true;
            //let bprint: bool = itarget == 24 * 4373 || itarget == 1049520;
            if self.exhaustive_search {
                let mut i = istart;
                while i * i <= itarget {
                    if itarget % i == 0 {
                        factors.push(i);
                        //if bprint { println!("n = {}, istart = {}, itarget = {}, i = {}, factors = {:?}", n, istart, itarget, i, factors); }
                        self.backtrack_vec(i, itarget / i, factors.clone());
                        factors.pop();
                    }
                    i += 1;
                }
            } else {
                //let mut vecdivisors: Vec<u32> = self.divisor_gen(itarget);
				let mut vecdivisors: Vec<u32> = divisors::get_divisors(itarget);
				//println!("vecdivisors({}) orig: {:?}", itarget, vecdivisors);
                //vecdivisors.sort_unstable();
				//println!("vecdivisors({}) sort: {:?}", itarget, vecdivisors);
                if false {
                    vecdivisors.push(itarget);
                }
                for div in &vecdivisors {
                    if *div != vecdivisors[vecdivisors.len() - 1] {
                        factors.push(*div);
                        //if bprint { println!("n = {}, istart = {}, itarget = {}, div = {}, factors = {:?}", n, istart, itarget, div, factors); }
                        self.backtrack_vec(*div, itarget / div, factors.clone());
                        factors.pop();
                    }
                }
                if true {
                    factors.push(itarget);
                    self.backtrack_vec(itarget, 1, factors.clone());
                    factors.pop();
                }
            }
        }
    }
    
   return;
}
 
 /*
n = 1049520, vecvec1 = [[5, 6, 8, 4373], [3, 8, 10, 4373], [12, 20, 4373], [5, 12, 17492], [15, 16, 4373], [5, 16, 13119], [3, 20, 17492], [5, 24, 8746], [3, 40, 8746], [5, 48, 4373], [3, 80, 4373]]
n = 1049520, setvec2 = {[10, 24, 4373], [3, 40, 8746], [8, 15, 8746], [3, 20, 17492], [15, 16, 4373], [4, 6, 10, 4373], [5, 24, 8746], [3, 5, 69968], [8, 30, 4373], [10, 12, 8746], [5, 48, 4373], [3, 5, 16, 4373], [5, 6, 34984], [6, 20, 8746], [5, 12, 17492], [3, 8, 10, 4373], [8, 10, 13119], [6, 8, 21865], [3, 4, 10, 8746], [4, 6, 43730], [6, 10, 17492], [12, 20, 4373], [3, 16, 21865], [4, 5, 6, 8746], [5, 6, 8, 4373], [3, 10, 34984], [5, 8, 26238], [3, 5, 8, 8746], [6, 40, 4373], [3, 80, 4373], [3, 8, 43730], [4, 10, 26238], [5, 16, 13119], [4, 30, 8746]}, factors2 = [2, 2, 2, 2, 3, 5, 4373]
 */

#[instrument]
pub fn factor_combinations_ary(&mut self, i: u32) -> Vec<[u32; 24]>
{
    self.combinations_ary.clear();
    let mut factors: [u32; 24] = [0; 24];
    self.backtrack_ary(2, i, &mut factors, 0);
    return self.combinations_ary.clone();
}

#[instrument]
pub fn factor_combinations_tinyvec(&mut self, i: u32) -> Vec<TinyVec<[i32; 24]>>
{
    self.combinations_tinyvec.clear();
    let mut factors: TinyVec<[i32; 24]> = tiny_vec![0; 24];
    self.backtrack_tinyvec(2, i as i32, factors.clone());
    return self.combinations_tinyvec.clone();
}

#[instrument]
pub fn factor_combinations_vec(&mut self, i: u32) -> Vec<Vec<u32>>
{
    self.combinations_vec.clear();
    let mut factors: Vec<u32> = Vec::<u32>::new();
    self.backtrack_vec(2, i, factors.clone());
    return self.combinations_vec.clone();
}


pub fn print_capacity(&self) {
    // approx 6GB-7GB
    // LcmMapCapacity = 1,835,008 (2^20.8) - 3,670,016 (2^21.8)
    // FactorsCapacity = 1,872,354,336 (2^30.8) - 3,777,512,175 (2^31.8)
    let i = LcmMapCapacity.load(Ordering::Relaxed);
    let j = Factors.lock().unwrap().max_capacity;
    println!("capacity = {}, LcmMapCapacity = {} (2^{:.2}), Factors.max_capacity = {} (2^{:.2})", self.capacity.separate_with_commas(), i.separate_with_commas(), (i as f32).log2(), j.separate_with_commas(), (j as f32).log2());
    println!("lcm_map.capacity() = {}", LcmMap.lock().unwrap().capacity().separate_with_commas());
    let keys_len = Factors.lock().unwrap().keys_len();
    let values_len = Factors.lock().unwrap().values_len();
    println!("factors.keys.len() = {}, factors.values.len() = {}", keys_len.separate_with_commas(), values_len.separate_with_commas());
    let keys_len = FactorSlices.lock().unwrap().keys_len();
    let values_len = FactorSlices.lock().unwrap().values_len();
    println!("factor_slices.keys.len() = {}, factor_slices.values.len() = {}", keys_len.separate_with_commas(), values_len.separate_with_commas());
    let keys_len = Divisors.lock().unwrap().keys_len();
    let values_len = Divisors.lock().unwrap().values_len();
    println!("divisors.keys.len() = {}, divisors.values.len() = {}", keys_len.separate_with_commas(), values_len.separate_with_commas());
}

#[instrument]
pub fn factor_slice(&mut self, mut n: u32) -> Vec<u32> {
    if unsafe { self.bitprimes.contains_unchecked(n as usize) } {
        return vec![n];
    }
    if self.bln_factor_slices {
        let mut factor_slices = if self.global { FactorSlices.lock().unwrap() } else { self.factor_slices.lock().unwrap() };
        if factor_slices.contains_key(n) {
            let aryslices = factor_slices.get(n);
            return aryslices.to_vec();
        }
    }
    let mut rtn: Vec<u32> = Vec::new();
    let un = n as u32;
    let mut bbreak: bool = false;
    let isqrtn = n.isqrt();
    for p in VecPrimes.lock().unwrap().iter() {
        let mut foundp: bool = false;
        while n % *p == 0 {
            foundp = true;
            rtn.push(*p);
            n /= p;
            if n == 1 {
                bbreak = true;
                break
            }
        }
        if bbreak || *p > isqrtn {
            break;
        }
        if foundp {
            if self.bln_factor_slices {
                let mut factor_slices = if self.global { FactorSlices.lock().unwrap() } else { self.factor_slices.lock().unwrap() };
                if factor_slices.contains_key(n as u32) {
                    rtn.extend(factor_slices.get(n as u32));
                    n = 1;
                    break;
                }
            }
            if unsafe { self.bitprimes.contains_unchecked(n as usize) } {
                rtn.push(n);
                n = 1;
                break;
            }
        }
    }
    if n != 1 {
        rtn.push(n);
    }
    let mut factor_slices = if self.global { FactorSlices.lock().unwrap() } else { self.factor_slices.lock().unwrap() };
    if self.bln_factor_slices && factor_slices.values_len() < factor_slices.max_capacity {        
        factor_slices.insert(un, rtn);
        //println!("for n = {}, isqrtn = {}, ip = {}, rtn = {:?}", un, isqrtn, ip, rtn);
        //println!("for n = {}, isqrtn = {}, ip = {}, self.factor_slices.get(un) = {:?}", un, ip, isqrtn, self.factor_slices.get(un));
        let aryslices = factor_slices.get(un);
        return aryslices.to_vec();
    } else {
        return rtn;
    }
}

#[instrument]
fn factor_gen(&mut self, mut n: u32) -> Vec<Factor> {
    if unsafe { self.bitprimes.contains_unchecked(n as usize) } {
        return vec![Factor { i: n, exp: 1 }];
    }
    if self.bln_factors {
        let mut factors = if self.global { Factors.lock().unwrap() } else { self.factors.lock().unwrap() };
        if factors.contains_key(n) {
            let aryfactors = factors.get(n);
            return aryfactors.to_vec();
        }
    }
    // from 2 to 1048576 with 4 threads in 102.3 minutes (1.70 hours)
    
    let mut rtn: Vec<Factor> = Vec::new();
    let mut len: usize = 0;
    for p in PrimeFactorization::run(n).factors {
        if len == 0 || rtn[len - 1].i != p {
            rtn.push(Factor { i: p, exp: 1 });
            len += 1;
        } else {
            rtn[len - 1].exp += 1;
        }
    }
    return rtn;
    /*
    let mut rtn: Vec<Factor> = Vec::new();
    let un = n as u32;
    let mut bbreak: bool = false;
    //let mut ip = 0;
    let isqrtn = n.isqrt();
    for p in VecPrimes.lock().unwrap().iter() {
        //ip += 1;
        //println!("ip = {}, p = {}", ip, p);
        let mut foundp: bool = false;
        while n % *p == 0 {
            foundp = true;
            let len: usize = rtn.len();
            if len == 0 || rtn[len - 1].i != *p {
                rtn.push(Factor { i: *p, exp: 1 });
            } else {
                rtn[len - 1].exp += 1;
            }
            n /= p;
            if n == 1 {
                bbreak = true;
                break
            }
        }
        if bbreak || *p > isqrtn {
            break;
        }
        if foundp {
            if self.bln_factors {
                let mut factors = if self.global { Factors.lock().unwrap() } else { self.factors.lock().unwrap() };
                if factors.contains_key(n as u32) {
                    for fact in factors.get(n as u32) {
                        rtn.push(*fact);
                    }
                    n = 1;
                    break;
                }
            }
            if unsafe { self.bitprimes.contains_unchecked(n as usize) } {
                rtn.push(Factor { i: n, exp: 1 });
                n = 1;
                break;
            }
        }
    }
    if n != 1 {
        rtn.push(Factor { i: n, exp: 1 });
    }
    let mut factors = if self.global { Factors.lock().unwrap() } else { self.factors.lock().unwrap() };
    if self.bln_factors && factors.values_len() < factors.max_capacity {
        factors.insert(un, rtn);
        //println!("for n = {}, isqrtn = {}, ip = {}, rtn = {:?}", un, isqrtn, ip, rtn);
        //println!("for n = {}, isqrtn = {}, ip = {}, Factors.get(un) = {:?}", un, ip, isqrtn, Factors.get(un));
        let aryfactors: &[Factor] = factors.get(un);
        return aryfactors.to_vec();
    } else {
        return rtn;
    }
    */
}

#[instrument]
//pub fn divisor_gen(&mut self, n: u32, factors1: Vec<Factor>) -> Vec<u32> 
pub fn divisor_gen(&mut self, n: u32) -> Vec<u32> {
    if self.bitprimes[n as usize] {
        return vec![];
    }    
    return divisors::get_divisors(n);
    /*
    {
        let mut divisors = if self.global { Divisors.lock().unwrap() } else { self.divisors.lock().unwrap() };
        if divisors.contains_key(n as u32) {
            let arydivisors = divisors.get(n as u32);
            return arydivisors.to_vec();
        }
    }
    let mut factors2: Vec<Factor> = factors1;
    if factors2.len() == 0 {
        factors2 = self.factor_gen(n);
    }
    let nfactors: usize = factors2.len();
    let mut f: Vec<u32> = vec![0; nfactors];
    let mut rtn: Vec<u32> = Vec::new();
    loop {
        let mut red: u32 = <u32>::pow(factors2[0].i, f[0].try_into().unwrap());
        //assert!(nfactors <= factors.len());
        for x in 1..nfactors {
            if f[x] > 0 {
                red *= <u32>::pow(factors2[x].i, f[x].try_into().unwrap());
            }
        }
        if red != 1 && red != n {
            rtn.push(red);
        }
        let mut i: usize = 0;
        loop {
            f[i] += 1;
            if f[i] <= factors2[i].exp as u32 {
                break;
            }
            f[i] = 0;
            i += 1;
            if i >= nfactors {
                let mut divisors = if self.global { Divisors.lock().unwrap() } else { self.divisors.lock().unwrap() };
                if self.bln_divisors && divisors.values_len() < divisors.max_capacity {
                    divisors.insert(n as u32, rtn);
                    let arydivisors = divisors.get(n as u32);
                    return arydivisors.to_vec();
                } else {
                    return rtn;
                }
            }
        }
    }
    */
}

fn lcm(&self, i: i32, j: i32) -> i32
{
    return num::integer::lcm(i, j);
    /*
    let mut map = if self.global { LcmMap.lock().unwrap() } else { self.lcm_map.lock().unwrap() };
    if (map.contains_key(&(i, j))) {
        return map[&(i, j)];
    } else {
        let k = num::integer::lcm(i, j);
        if map.capacity() < LcmMapCapacity.load(Ordering::Relaxed) { map.insert((i, j), k); }
        return k;
    }
    */
}

#[instrument]
fn mult_ary(&mut self, ary: &[i32]) -> i32
{
    if VecPrimes.lock().unwrap().len() <= 1
    {
        self.init();
    }
    let ilen: usize = ary.len();
    let mut preva = if unsafe { self.bitprimes.contains_unchecked(ary[0] as usize) || self.bitprimes.contains_unchecked(ary[1] as usize) } { ary[0]*ary[1] } else { self.lcm(ary[0], ary[1]) };
    if ilen <= 2
    {
        return preva;
    }
    else
    {
        for a in 2..(12 + 1)
        {
            preva = if unsafe { self.bitprimes.contains_unchecked(ary[a] as usize) } { preva*ary[a] } else { self.lcm(preva, ary[a]) };
            if ilen <= a + 1
            {
                return preva;
            }
        }
    }
    return preva;
}

#[instrument]
fn mult_vec(&mut self, mut ary: Vec<i32>) -> i32
{
    if VecPrimes.lock().unwrap().len() <= 1
    {
        self.init();
    }
    let ilen: usize = ary.len();
    ary[1] = if unsafe { self.bitprimes.contains_unchecked(ary[0] as usize) || self.bitprimes.contains_unchecked(ary[1] as usize) } { ary[0]*ary[1] } else { self.lcm(ary[0], ary[1]) };
    if ilen <= 2
    {
        return ary[1];
    }
    else
    {
        for a in 2..(12 + 1)
        {
            ary[a] = if unsafe { self.bitprimes.contains_unchecked(ary[a] as usize) } { ary[a - 1]*ary[a] } else { self.lcm(ary[a - 1], ary[a]) };
            if ilen <= a + 1
            {
                return ary[a];
            }
        }
    }
    return ary[ilen - 1];
}

#[instrument]
pub fn calc_density(&mut self, a: &Vec<i32>) -> Ratio<i32>
{
        let ilen: usize = a.len();
        let checkhalf = false;
        let mut sum = Ratio::<i32>::new(1, a[0]);
        
        if ilen >= 2 {
            sum += Ratio::<i32>::new(1, a[1]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 3 {
            sum += Ratio::<i32>::new(1, a[2]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 4 {
            sum += Ratio::<i32>::new(1, a[3]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 5 {
            sum += Ratio::<i32>::new(1, a[4]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 6 {
            sum += Ratio::<i32>::new(1, a[5]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 7 {
            sum += Ratio::<i32>::new(1, a[6]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 8 {
            sum += Ratio::<i32>::new(1, a[7]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 9 {
            sum += Ratio::<i32>::new(1, a[8]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 10 {
            sum += Ratio::<i32>::new(1, a[9]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[9]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[9]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[9]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[9]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 11 {
            sum += Ratio::<i32>::new(1, a[10]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[10]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[2], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[9], a[10]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[9], a[10]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[10]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[9], a[10]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[10]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[9], a[10]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[10]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]]));
            if checkhalf && sum > self.half 
            {
                return self.one;
            }
        }
        if ilen >= 12 {
            sum += Ratio::<i32>::new(1, a[11]) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[9], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[1], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[8], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[9], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[6], a[7], a[8], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[8], a[9], a[10], a[11]]));
            sum += Ratio::<i32>::new(-1, self.mult_ary(&[a[1], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]]));
            sum += Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) + Ratio::<i32>::new(1, self.mult_ary(&[a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[5], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[4], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[3], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[2], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[1], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[7], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[6], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[5], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[4], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[3], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[2], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]])) - Ratio::<i32>::new(1, self.mult_ary(&[a[0], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]]));
        }
        return sum;
}

}




